// ---------- Setup ----------
let cart = JSON.parse(localStorage.getItem('cart')) || [];
const products = document.querySelectorAll('.product');
const cartIcon = document.getElementById('cart-count');
const cartTable = document.getElementById('cart-items');
const totalDisplay = document.getElementById('total-price');

// ---------- Add to Cart ----------
function addToCart(id, name, price, img) {
  const existing = cart.find(item => item.id === id);
  if (existing) {
    existing.qty += 1;
  } else {
    cart.push({ id, name, price, img, qty: 1 });
  }
  saveCart();
  updateCartUI();
  alert(`${name} added to cart`);
}

// ---------- Remove from Cart ----------
function removeFromCart(id) {
  cart = cart.filter(item => item.id !== id);
  saveCart();
  updateCartUI();
}

// ---------- Update Quantity ----------
function changeQty(id, delta) {
  const item = cart.find(i => i.id === id);
  if (!item) return;
  item.qty += delta;
  if (item.qty <= 0) removeFromCart(id);
  saveCart();
  updateCartUI();
}

// ---------- Save to Local Storage ----------
function saveCart() {
  localStorage.setItem('cart', JSON.stringify(cart));
}

// ---------- Load and Render Cart ----------
function updateCartUI() {
  if (!cartTable || !cartIcon) return;

  cartTable.innerHTML = '';
  let total = 0;

  cart.forEach(item => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td><img src="${item.img}" height="50"/></td>
      <td>${item.name}</td>
      <td>‚Çπ${item.price}</td>
      <td>
        <button onclick="changeQty('${item.id}', -1)">-</button>
        ${item.qty}
        <button onclick="changeQty('${item.id}', 1)">+</button>
      </td>
      <td>‚Çπ${item.qty * item.price}</td>
      <td><button onclick="removeFromCart('${item.id}')">X</button></td>
    `;
    total += item.qty * item.price;
    cartTable.appendChild(row);
  });

  cartIcon.innerText = cart.length;
  totalDisplay.innerText = `Total: ‚Çπ${total}`;
}

// ---------- Load on Start ----------
document.addEventListener('DOMContentLoaded', () => {
  updateCartUI();
});
// ---------- Wishlist Setup ----------
let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];

function toggleWishlist(id, name, price, img) {
  const index = wishlist.findIndex(item => item.id === id);
  if (index !== -1) {
    wishlist.splice(index, 1);
    alert(`${name} removed from wishlist`);
  } else {
    wishlist.push({ id, name, price, img });
    alert(`${name} added to wishlist`);
  }
  localStorage.setItem('wishlist', JSON.stringify(wishlist));
  updateWishlistUI();
}

function updateWishlistUI() {
  const wishIcon = document.getElementById('wishlist-count');
  if (wishIcon) wishIcon.innerText = wishlist.length;
}

// ---------- Search ----------
const searchInput = document.getElementById('search');
if (searchInput) {
  searchInput.addEventListener('input', () => {
    const term = searchInput.value.toLowerCase();
    products.forEach(p => {
      const name = p.querySelector('h3').innerText.toLowerCase();
      p.style.display = name.includes(term) ? 'block' : 'none';
    });
  });
}

// ---------- Category Filter ----------
const categorySelect = document.getElementById('category-filter');
if (categorySelect) {
  categorySelect.addEventListener('change', () => {
    const category = categorySelect.value;
    products.forEach(p => {
      const cat = p.dataset.category;
      p.style.display = category === 'all' || cat === category ? 'block' : 'none';
    });
  });
}

// ---------- Price Sort ----------
const sortSelect = document.getElementById('price-sort');
if (sortSelect) {
  sortSelect.addEventListener('change', () => {
    const container = document.querySelector('.product-list');
    const sorted = Array.from(products).sort((a, b) => {
      const pa = parseFloat(a.dataset.price);
      const pb = parseFloat(b.dataset.price);
      return sortSelect.value === 'low' ? pa - pb : pb - pa;
    });
    container.innerHTML = '';
    sorted.forEach(p => container.appendChild(p));
  });
}

// ---------- Dark Mode ----------
const toggleTheme = document.getElementById('dark-mode-toggle');
if (toggleTheme) {
  toggleTheme.addEventListener('click', () => {
    document.body.classList.toggle('dark-mode');
    localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
  });

  const theme = localStorage.getItem('theme');
  if (theme === 'dark') {
    document.body.classList.add('dark-mode');
  }
}
// ‚≠ê Review & Rating Logic
document.querySelectorAll('.submit-review').forEach((btn, index) => {
  btn.addEventListener('click', () => {
    const productCard = btn.closest('.product');
    const productId = productCard.getAttribute('data-id') || `product-${index}`;
    const reviewInput = productCard.querySelector('.review-input');
    const reviewText = reviewInput.value.trim();
    const stars = productCard.querySelectorAll('.star.selected');
    const rating = stars.length;

    if (reviewText === "" || rating === 0) {
      alert("Please add a review and rating.");
      return;
    }

    const review = { text: reviewText, rating: rating };
    let reviews = JSON.parse(localStorage.getItem(`reviews-${productId}`)) || [];
    reviews.push(review);
    localStorage.setItem(`reviews-${productId}`, JSON.stringify(reviews));

    reviewInput.value = "";
    productCard.querySelectorAll('.star').forEach(star => star.classList.remove('selected'));
    renderReviews(productCard, productId);
  });
});

// ‚≠ê Star selection logic
document.querySelectorAll('.star').forEach(star => {
  star.addEventListener('click', () => {
    const value = parseInt(star.getAttribute('data-value'));
    const starGroup = star.parentElement.querySelectorAll('.star');
    starGroup.forEach(s => s.classList.remove('selected'));
    for (let i = 0; i < value; i++) {
      starGroup[i].classList.add('selected');
    }
  });
});

// üí¨ Render Reviews
function renderReviews(productCard, productId) {
  const reviewList = productCard.querySelector('.review-list');
  const reviews = JSON.parse(localStorage.getItem(`reviews-${productId}`)) || [];
  reviewList.innerHTML = reviews.map(r => `
    <div style="border-top: 1px solid #ddd; padding: 5px 0;">
      <div>${"‚≠ê".repeat(r.rating)}</div>
      <div>${r.text}</div>
    </div>
  `).join('');
}

// üöÄ Load reviews on startup
document.querySelectorAll('.product').forEach((card, index) => {
  const productId = card.getAttribute('data-id') || `product-${index}`;
  renderReviews(card, productId);
});
// üîç Image Zoom Preview
function openPreview(imgContainer) {
  const img = imgContainer.querySelector('img');
  const modal = document.getElementById('image-preview-modal');
  const previewImg = document.getElementById('preview-image');
  previewImg.src = img.src;
  modal.style.display = "flex";
}

function closePreview() {
  document.getElementById('image-preview-modal').style.display = "none";
}

// üñºÔ∏è Change Main Image from Thumbnails (optional)
function changeMainImage(thumbnail) {
  const mainImage = thumbnail.closest('.product').querySelector('.main-product-img');
  mainImage.src = thumbnail.src;
}
